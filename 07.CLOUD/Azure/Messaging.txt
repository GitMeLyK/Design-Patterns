
Messaging Patterns (Categoria)


	La natura distribuita delle applicazioni cloud richiede un'infrastruttura di messaggistica 
	che colleghi i componenti e i servizi, idealmente in modo vagamente accoppiato al fine di 
	massimizzare la scalabilità. 
	
	La messaggistica asincrona è ampiamente utilizzata e offre molti vantaggi, ma comporta 
	anche sfide come l'ordinamento dei messaggi, la gestione dei messaggi velenosi, 
	l'idempotenza e altro ancora.	

	Questi sono quelli in questa categoria

	Asynchronous Request-Reply		Decouple backend processing from a frontend host, where backend processing needs to be asynchronous, but the frontend still needs a clear response.
	Claim Check						Split a large message into a claim check and a payload to avoid overwhelming a message bus.
	Choreography					Have each component of the system participate in the decision-making process about the workflow of a business transaction, instead of relying on a central point of control.
	Competing Consumers				Enable multiple concurrent consumers to process messages received on the same messaging channel.
	Pipes and Filters				Break down a task that performs complex processing into a series of separate elements that can be reused.
	Priority Queue					Prioritize requests sent to services so that requests with a higher priority are received and processed more quickly than those with a lower priority.
	Publisher-Subscriber			Enable an application to announce events to multiple interested consumers asynchronously, without coupling the senders to the receivers.
	Queue-Based Load Leveling		Use a queue that acts as a buffer between a task and a service that it invokes in order to smooth intermittent heavy loads.
	Scheduler Agent Supervisor		Coordinate a set of actions across a distributed set of services and other remote resources.
	Sequential Convoy				Process a set of related messages in a defined order, without blocking processing of other groups of messages.